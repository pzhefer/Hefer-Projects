import { useState, useEffect } from 'react';
import { Plus, Search, Filter, FileText, Download, Eye, Trash2, Upload, Calendar, User, CheckCircle, AlertCircle, Clock, XCircle, FileCheck, Package } from 'lucide-react';
import { supabase, type Drawing, type Project } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import DrawingUploadModal from './DrawingUploadModal';
import DrawingViewer from './DrawingViewer';

export default function Drawings() {
  const { user } = useAuth();
  const [drawings, setDrawings] = useState<Drawing[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterProject, setFilterProject] = useState<string>('all');
  const [filterDiscipline, setFilterDiscipline] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [selectedDrawing, setSelectedDrawing] = useState<Drawing | null>(null);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');

  useEffect(() => {
    fetchProjects();
    fetchDrawings();
  }, []);

  const fetchProjects = async () => {
    try {
      const { data, error } = await supabase
        .from('projects')
        .select('*')
        .order('name');

      if (error) throw error;
      setProjects(data || []);
    } catch (error) {
      console.error('Error fetching projects:', error);
    }
  };

  const fetchDrawings = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('drawings')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setDrawings(data || []);
    } catch (error) {
      console.error('Error fetching drawings:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteDrawing = async (id: string) => {
    if (!confirm('Are you sure you want to delete this drawing? This action cannot be undone.')) return;

    try {
      const { error } = await supabase
        .from('drawings')
        .delete()
        .eq('id', id);

      if (error) throw error;
      setDrawings(drawings.filter(d => d.id !== id));
    } catch (error) {
      console.error('Error deleting drawing:', error);
      alert('Failed to delete drawing');
    }
  };

  const handleDownloadDrawing = async (drawing: Drawing) => {
    try {
      const { data, error } = await supabase.storage
        .from('drawings')
        .download(drawing.file_url);

      if (error) throw error;

      const url = URL.createObjectURL(data);
      const a = document.createElement('a');
      a.href = url;
      a.download = drawing.file_name;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error downloading drawing:', error);
      alert('Failed to download drawing');
    }
  };

  const filteredDrawings = drawings.filter(drawing => {
    const matchesSearch =
      drawing.drawing_number.toLowerCase().includes(searchTerm.toLowerCase()) ||
      drawing.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      drawing.discipline.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesProject = filterProject === 'all' || drawing.project_id === filterProject;
    const matchesDiscipline = filterDiscipline === 'all' || drawing.discipline === filterDiscipline;
    const matchesStatus = filterStatus === 'all' || drawing.status === filterStatus;
    return matchesSearch && matchesProject && matchesDiscipline && matchesStatus;
  });

  const getProjectName = (projectId: string) => {
    const project = projects.find(p => p.id === projectId);
    return project?.name || 'Unknown Project';
  };

  const getStatusConfig = (status: Drawing['status']) => {
    const configs = {
      draft: { label: 'Draft', color: 'bg-gray-100 text-gray-700', icon: Clock },
      for_review: { label: 'For Review', color: 'bg-blue-100 text-blue-700', icon: AlertCircle },
      approved: { label: 'Approved', color: 'bg-green-100 text-green-700', icon: CheckCircle },
      superseded: { label: 'Superseded', color: 'bg-red-100 text-red-700', icon: XCircle },
    };
    return configs[status];
  };

  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const disciplines = [...new Set(drawings.map(d => d.discipline))];

  const stats = {
    total: drawings.length,
    draft: drawings.filter(d => d.status === 'draft').length,
    forReview: drawings.filter(d => d.status === 'for_review').length,
    approved: drawings.filter(d => d.status === 'approved').length,
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading drawings...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Drawings</h1>
          <p className="text-gray-600 mt-1">Manage and track all project drawings and revisions</p>
        </div>
        <button
          onClick={() => setShowUploadModal(true)}
          className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Plus size={20} />
          <span>Upload Drawing</span>
        </button>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Drawings</p>
              <p className="text-2xl font-bold text-gray-900 mt-1">{stats.total}</p>
            </div>
            <Package className="text-gray-400" size={24} />
          </div>
        </div>
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Draft</p>
              <p className="text-2xl font-bold text-gray-600 mt-1">{stats.draft}</p>
            </div>
            <Clock className="text-gray-400" size={24} />
          </div>
        </div>
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">For Review</p>
              <p className="text-2xl font-bold text-blue-600 mt-1">{stats.forReview}</p>
            </div>
            <AlertCircle className="text-blue-400" size={24} />
          </div>
        </div>
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Approved</p>
              <p className="text-2xl font-bold text-green-600 mt-1">{stats.approved}</p>
            </div>
            <CheckCircle className="text-green-400" size={24} />
          </div>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="bg-white rounded-lg border border-gray-200 p-4">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0 gap-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
            <input
              type="text"
              placeholder="Search by drawing number, title, or discipline..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div className="flex items-center space-x-4">
            <select
              value={filterProject}
              onChange={(e) => setFilterProject(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">All Projects</option>
              {projects.map(project => (
                <option key={project.id} value={project.id}>{project.name}</option>
              ))}
            </select>
            <select
              value={filterDiscipline}
              onChange={(e) => setFilterDiscipline(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">All Disciplines</option>
              {disciplines.map(discipline => (
                <option key={discipline} value={discipline}>{discipline}</option>
              ))}
            </select>
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">All Status</option>
              <option value="draft">Draft</option>
              <option value="for_review">For Review</option>
              <option value="approved">Approved</option>
              <option value="superseded">Superseded</option>
            </select>
            <div className="flex items-center space-x-2 border border-gray-300 rounded-lg p-1">
              <button
                onClick={() => setViewMode('grid')}
                className={`p-2 rounded ${viewMode === 'grid' ? 'bg-blue-100 text-blue-600' : 'text-gray-600'}`}
              >
                <Filter size={18} />
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={`p-2 rounded ${viewMode === 'list' ? 'bg-blue-100 text-blue-600' : 'text-gray-600'}`}
              >
                <FileText size={18} />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Drawings Grid/List */}
      {filteredDrawings.length === 0 ? (
        <div className="bg-white rounded-lg border border-gray-200 p-12 text-center">
          <Package className="mx-auto text-gray-400 mb-4" size={48} />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No drawings found</h3>
          <p className="text-gray-600 mb-4">
            {searchTerm || filterProject !== 'all' || filterDiscipline !== 'all' || filterStatus !== 'all'
              ? 'Try adjusting your search or filters'
              : 'Get started by uploading your first drawing'}
          </p>
          {!searchTerm && filterProject === 'all' && filterDiscipline === 'all' && filterStatus === 'all' && (
            <button
              onClick={() => setShowUploadModal(true)}
              className="inline-flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Plus size={20} />
              <span>Upload Drawing</span>
            </button>
          )}
        </div>
      ) : (
        <div className={viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' : 'space-y-4'}>
          {filteredDrawings.map((drawing) => {
            const statusConfig = getStatusConfig(drawing.status);
            const StatusIcon = statusConfig.icon;

            return (
              <div
                key={drawing.id}
                className="bg-white rounded-lg border border-gray-200 hover:shadow-lg transition-all p-6"
              >
                {/* Header */}
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <FileText className="text-blue-600" size={20} />
                      <span className="text-sm font-mono font-semibold text-gray-900">
                        {drawing.drawing_number}
                      </span>
                      <span className="text-xs text-gray-500">Rev {drawing.revision}</span>
                    </div>
                    <h3 className="text-base font-semibold text-gray-900 mb-1">{drawing.title}</h3>
                    <p className="text-sm text-gray-600">{getProjectName(drawing.project_id)}</p>
                  </div>
                </div>

                {/* Status and Discipline */}
                <div className="flex items-center space-x-2 mb-4">
                  <span className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium ${statusConfig.color}`}>
                    <StatusIcon size={14} />
                    <span>{statusConfig.label}</span>
                  </span>
                  <span className="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700">
                    {drawing.discipline}
                  </span>
                </div>

                {/* File Info */}
                <div className="mb-4 text-sm">
                  <p className="text-gray-600 mb-1">
                    <span className="font-medium">File:</span> {drawing.file_name}
                  </p>
                  <p className="text-gray-600">
                    <span className="font-medium">Size:</span> {formatFileSize(drawing.file_size)}
                  </p>
                </div>

                {/* Metadata */}
                <div className="pt-4 border-t border-gray-200 mb-4">
                  <div className="flex items-center text-sm text-gray-600 mb-2">
                    <Calendar size={14} className="mr-2" />
                    <span>Uploaded {formatDate(drawing.created_at)}</span>
                  </div>
                  {drawing.notes && (
                    <p className="text-sm text-gray-600 line-clamp-2">
                      <span className="font-medium">Notes:</span> {drawing.notes}
                    </p>
                  )}
                </div>

                {/* Actions */}
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => setSelectedDrawing(drawing)}
                    className="flex-1 flex items-center justify-center space-x-1 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
                  >
                    <Eye size={16} />
                    <span>View</span>
                  </button>
                  <button
                    onClick={() => handleDownloadDrawing(drawing)}
                    className="flex items-center justify-center px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    <Download size={16} />
                  </button>
                  {user?.id === drawing.uploaded_by && (
                    <button
                      onClick={() => handleDeleteDrawing(drawing.id)}
                      className="flex items-center justify-center px-3 py-2 bg-red-50 text-red-600 rounded-lg hover:bg-red-100 transition-colors"
                    >
                      <Trash2 size={16} />
                    </button>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* Upload Modal */}
      {showUploadModal && (
        <DrawingUploadModal
          projects={projects}
          onClose={() => setShowUploadModal(false)}
          onDrawingUploaded={() => {
            fetchDrawings();
            setShowUploadModal(false);
          }}
        />
      )}

      {/* Drawing Viewer */}
      {selectedDrawing && (
        <DrawingViewer
          drawing={selectedDrawing}
          onClose={() => setSelectedDrawing(null)}
        />
      )}
    </div>
  );
}
